void main(){
  // 변수 선언
  int a1 = 100;
  double a2 = 11.11;
  bool a3 = true;
  String a4 = '안녕하세요';

  print('a1 : $a1');
  print('a2 : $a2');
  print('a3 : $a3');
  print('a4 : $a4');

  // 자료형이 다른 값을 넣어주면 오류가 발생한다.
  // a1 = 11.11;

  print('-----------------------------');

  // var : 자료형 대신에 사용하면 저장하는 값의 종류를 보고 타입이 결정된다.
  var a5 = 100;
  var a6 = 11.11;
  print('a5 : $a5');
  print('a6 : $a6');

  // 정수형으로 결정된 변수에 실수값을 넣어본다.
  // var로 선언된 정수형 변수이므로 오류가 발생한다.
  // a5 = 11.11;

  // dynamic : 자료형 대신에 사용하면 값의 타입이 결정되지 않는다
  // 정수, 실수, 문자열 등 다양한 타입의 값을 하나의 변수에 담을 수 있다.
  dynamic a7 = 100;
  print('a7 : $a7');

  a7 = 11.11;
  print('a7 : $a7');

  a7 = true;
  print('a7 : $a7');

  // const
  // 빌드타임 상수.
  // 기억장소를 정의할 때 관리할 값을 지정해줘야 한다.
  const int a8 = 100;
  // const var a9 = 200; // var는 const와 동시에 사용할 수 없다.
  const dynamic a10 = 300;

  print('a8 : $a8');
  print('a10 : $a10');

  // 상수로 정의되어 있기 때문에 값을 새롭게 저장할 수 없다.
  // a8 = 500;
  // a10 = 600;

  // 함수 호출을 통해 값을 반환받는 코드 등 처럼 프로그램이 실행되어야지만
  // 구할 수 있는 값을 const 변수에 넣어주는 작업을 하면 오류가 발생한다.
  // const a11 = DateTime.now();

  // final
  // 런타임 상수
  // 프로그램 실행 중에 발생되는 값을 상수로 정의해 쓰고자 할 때 사용한다.
  final int a12 = 100;
  final dynamic a13 = 200;
  // 프로그램 실행 중에 구하는 값을 저장하는 상수를 정의하는 것도 가능하다.
  final a14 = DateTime.now();

  print("a12 : $a12");
  print("a13 : $a13");
  print("a14 : $a14");
}